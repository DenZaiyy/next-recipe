version: 2.1
orbs:
  node: circleci/node@5
jobs:
  # Job to run tests with jest-junit and store results to /test-results
  test-node:
    # Install node dependencies and run tests
    executor: node/default
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./test-results/
    # Define the steps to run in this job
    steps:
      # Check out the code from the repository
      - checkout
      # Install node dependencies using npm
      - node/install-packages:
          pkg-manager: npm
      - run:
          command: npm install jest-junit
      - run:
          name: Create test-results directory
          command: mkdir -p ./test-results
        # Run the tests using npm and generate test results
      - run:
          name: Run tests
          command: npm run test --ci --runInBand --reporters=default --reporters=jest-junit
      # Store the test results in the specified directory
      - store_test_results:
          path: ./test-results/

  # Job to audit the node project
  audit-node:
    executor: node/default
    # Define the steps to run in this job
    steps:
      - checkout
      # Install node dependencies using npm
      - node/install-packages:
          pkg-manager: npm
      # Run npm audit to check for vulnerabilities
      - run:
          name: Run npm audit
          command: npm audit --audit-level=high

  # Job to lint the node project
  lint-node:
    executor: node/default
    # Define the steps to run in this job
    steps:
      - checkout
      # Install node dependencies using npm
      - node/install-packages:
          pkg-manager: npm
      # Run npm lint to check for code style issues
      - run:
          name: Run npm lint
          command: npm run lint

  # Job to build the node project and store artifacts
  build-node:
    # Build node project
    # Executor to use for the build job, using the same node image as the test job
    executor: node/default
    # Define the steps to run in this job
    steps:
      # Check out the code from the repository
      - checkout
      # Install node dependencies using npm
      - node/install-packages:
          pkg-manager: npm
      # Run the build command to generate the build artifacts
      - run:
          command: npm run build
      # Create the artifacts directory if it doesn't exist to avoid errors
      - run:
          name: Create the ~/artifacts directory if it doesn't exist
          command: mkdir -p ~/artifacts
      # Copy output to artifacts dir
      - run:
          name: Copy artifacts
          command: cp -R build dist public .output .next .docusaurus ~/artifacts 2>/dev/null || true
      # Store the artifacts in the specified directory
      - store_artifacts:
          path: ~/artifacts
          destination: node-build

  # Job to auto merge to the test branch
  auto-merge-to-test:
    # Use the same node image as the test job
    executor: node/default
    # Define the steps to run in this job
    steps:
      # Check out the code from the repository
      - checkout
      # Add SSH keys for authentication to GitHub
      - add_ssh_keys:
          fingerprints:
            - "SHA256:k3XuzNyv7ANUJUUCVb+Or4RQf7/2Cmto3vui9v0nRGM"
      # Configure git user name and email
      - run:
          name: Git config
          command: |
            git config --global user.name "$GITHUB_USER"
            git config --global user.email "$GITHUB_EMAIL"
      - run:
          name: Auto-merge dev into test
          command: |
            git fetch origin test
            git checkout test
            git reset --hard origin/test
            git merge --no-ff -m "Auto-merge from dev to test" dev || echo "Nothing to merge"
            git push origin test

  # Job to create a pull request to the main branch if tests are successful
  create-pr:
    # Use the same node image as the test job
    executor: node/default
    # Define the steps to run in this job
    steps:
      # Check out the code from the repository
      - checkout
      # Install GitHub CLI
      - run:
          name: Install GitHub CLI
          command: |
            sudo apt update && sudo apt install -y gh
      # Configure git user name and email
      - run:
          name: Git config
          command: |
            git config --global user.name "CircleCI Bot"
            git config --global user.email "bot@circleci.com"
      # Create a pull request to the main branch
      - run:
          name: Create PR to main
          command: |
            gh pr list --base main --head $(git rev-parse --abbrev-ref HEAD) | grep -q . || \
            gh pr create --base main --head $(git rev-parse --abbrev-ref HEAD) --title "Auto-PR from CircleCI" --body "This PR is created automatically by CircleCI after running tests and successfully."

  # Job to deploy the project on prod (vercel in this case)
  deploy-to-production:
    # Deploy the project using Vercel
    executor: node/default
    # Define the steps to run in this job
    steps:
      # Check out the code from the repository
      - checkout
      # Install node dependencies using npm
      - node/install-packages:
          pkg-manager: npm
      # Install Vercel CLI globally
      - run:
          name: Install Vercel CLI
          command: npm install --save-dev vercel
      # Deploy the project using Vercel CLI
      - run:
          name: Deploy to Vercel
          command: vercel deploy --target=production --token=$VERCEL_TOKEN

workflows:
  merge-dev-to-test:
    jobs:
      - test-node:
          filters:
            branches:
              only: dev
      - auto-merge-to-test:
          requires:
            - test-node
          filters:
            branches:
              only: dev

  ci-on-test:
    jobs:
      - test-node:
          filters:
            branches:
              only: test
      - build-node:
          requires:
            - test-node
          filters:
            branches:
              only: test
      - audit-node:
          requires:
            - build-node
          filters:
            branches:
              only: test
      - lint-node:
          requires:
              - build-node
          filters:
            branches:
              only: test
      - create-pr:
          requires:
            - lint-node
          filters:
            branches:
              only: test
  ci-on-main:
    jobs:
      - deploy-to-production:
          filters:
            branches:
              only: main
